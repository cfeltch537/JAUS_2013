/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : VelocityStateSensor_SendFSMContext.sm
 */

package src.urn_jaus_jss_mobility_VelocityStateSensor_1_0;

import framework.internalEvents.*;
import src.urn_jaus_jss_mobility_VelocityStateSensor_1_0.InternalEvents.*;
import src.urn_jaus_jss_mobility_VelocityStateSensor_1_0.Messages.*;
import java.io.PrintStream;

public class VelocityStateSensor_SendFSMContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public VelocityStateSensor_SendFSMContext(VelocityStateSensor_SendFSM owner)
    {
        super (VelocityStateSensor_SendFSM_SM.Sending);

        _owner = owner;
    }

    public VelocityStateSensor_SendFSMContext(VelocityStateSensor_SendFSM owner, VelocityStateSensor_SendFSMState initState)
    {
        super (initState);

        _owner = owner;
    }

    public void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public void BroadcastGlobalTransition()
    {
        _transition = "BroadcastGlobalTransition";
        getState().BroadcastGlobalTransition(this);
        _transition = "";
        return;
    }

    public void BroadcastLocalTransition()
    {
        _transition = "BroadcastLocalTransition";
        getState().BroadcastLocalTransition(this);
        _transition = "";
        return;
    }

    public void CancelEventTransition()
    {
        _transition = "CancelEventTransition";
        getState().CancelEventTransition(this);
        _transition = "";
        return;
    }

    public void CreateEventTransition()
    {
        _transition = "CreateEventTransition";
        getState().CreateEventTransition(this);
        _transition = "";
        return;
    }

    public void EventErrorTransition()
    {
        _transition = "EventErrorTransition";
        getState().EventErrorTransition(this);
        _transition = "";
        return;
    }

    public void EventOccurredTransition()
    {
        _transition = "EventOccurredTransition";
        getState().EventOccurredTransition(this);
        _transition = "";
        return;
    }

    public void QueryEventsTransition()
    {
        _transition = "QueryEventsTransition";
        getState().QueryEventsTransition(this);
        _transition = "";
        return;
    }

    public void QueryVelocityStateTransition()
    {
        _transition = "QueryVelocityStateTransition";
        getState().QueryVelocityStateTransition(this);
        _transition = "";
        return;
    }

    public void ReceiveTransition()
    {
        _transition = "ReceiveTransition";
        getState().ReceiveTransition(this);
        _transition = "";
        return;
    }

    public void SendTransition()
    {
        _transition = "SendTransition";
        getState().SendTransition(this);
        _transition = "";
        return;
    }

    public void UpdateEventTransition()
    {
        _transition = "UpdateEventTransition";
        getState().UpdateEventTransition(this);
        _transition = "";
        return;
    }

    public VelocityStateSensor_SendFSMState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((VelocityStateSensor_SendFSMState) _state);
    }

    protected VelocityStateSensor_SendFSM getOwner()
    {
        return (_owner);
    }

    public void setOwner(VelocityStateSensor_SendFSM owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private VelocityStateSensor_SendFSM _owner;

    public static abstract class VelocityStateSensor_SendFSMState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected VelocityStateSensor_SendFSMState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(VelocityStateSensor_SendFSMContext context) {}
        protected void Exit(VelocityStateSensor_SendFSMContext context) {}

        protected void BroadcastGlobalTransition(VelocityStateSensor_SendFSMContext context)
        {
            Default(context);
        }

        protected void BroadcastLocalTransition(VelocityStateSensor_SendFSMContext context)
        {
            Default(context);
        }

        protected void CancelEventTransition(VelocityStateSensor_SendFSMContext context)
        {
            Default(context);
        }

        protected void CreateEventTransition(VelocityStateSensor_SendFSMContext context)
        {
            Default(context);
        }

        protected void EventErrorTransition(VelocityStateSensor_SendFSMContext context)
        {
            Default(context);
        }

        protected void EventOccurredTransition(VelocityStateSensor_SendFSMContext context)
        {
            Default(context);
        }

        protected void QueryEventsTransition(VelocityStateSensor_SendFSMContext context)
        {
            Default(context);
        }

        protected void QueryVelocityStateTransition(VelocityStateSensor_SendFSMContext context)
        {
            Default(context);
        }

        protected void ReceiveTransition(VelocityStateSensor_SendFSMContext context)
        {
            Default(context);
        }

        protected void SendTransition(VelocityStateSensor_SendFSMContext context)
        {
            Default(context);
        }

        protected void UpdateEventTransition(VelocityStateSensor_SendFSMContext context)
        {
            Default(context);
        }

        protected void Default(VelocityStateSensor_SendFSMContext context)
        {
            if (context.getDebugFlag() == true)
            {
                PrintStream str = 
                    context.getDebugStream();

                str.println(
                    "TRANSITION   : Default");
            }

            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class VelocityStateSensor_SendFSM_SM
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final VelocityStateSensor_SendFSM_SM_Sending Sending =
            new VelocityStateSensor_SendFSM_SM_Sending("VelocityStateSensor_SendFSM_SM.Sending", 0);
        public static final VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE =
            new VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE("VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE", 1);
        private static final VelocityStateSensor_SendFSM_SM_Default Default =
            new VelocityStateSensor_SendFSM_SM_Default("VelocityStateSensor_SendFSM_SM.Default", -1);

    }

    protected static class VelocityStateSensor_SendFSM_SM_Default
        extends VelocityStateSensor_SendFSMState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected VelocityStateSensor_SendFSM_SM_Default(String name, int id)
        {
            super (name, id);
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class VelocityStateSensor_SendFSM_SM_Sending
        extends VelocityStateSensor_SendFSM_SM_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private VelocityStateSensor_SendFSM_SM_Sending(String name, int id)
        {
            super (name, id);
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE
        extends VelocityStateSensor_SendFSM_SM_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE(String name, int id)
        {
            super (name, id);
        }

        protected void BroadcastGlobalTransition(VelocityStateSensor_SendFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.BroadcastGlobalTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.BroadcastGlobalTransition()");
            }

            return;
        }

        protected void BroadcastLocalTransition(VelocityStateSensor_SendFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.BroadcastLocalTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.BroadcastLocalTransition()");
            }

            return;
        }

        protected void CancelEventTransition(VelocityStateSensor_SendFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.CancelEventTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.CancelEventTransition()");
            }

            return;
        }

        protected void CreateEventTransition(VelocityStateSensor_SendFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.CreateEventTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.CreateEventTransition()");
            }

            return;
        }

        protected void EventErrorTransition(VelocityStateSensor_SendFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.EventErrorTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.EventErrorTransition()");
            }

            return;
        }

        protected void EventOccurredTransition(VelocityStateSensor_SendFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.EventOccurredTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.EventOccurredTransition()");
            }

            return;
        }

        protected void QueryEventsTransition(VelocityStateSensor_SendFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryEventsTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryEventsTransition()");
            }

            return;
        }

        protected void QueryVelocityStateTransition(VelocityStateSensor_SendFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryVelocityStateTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.QueryVelocityStateTransition()");
            }

            return;
        }

        protected void ReceiveTransition(VelocityStateSensor_SendFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.ReceiveTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.ReceiveTransition()");
            }

            return;
        }

        protected void SendTransition(VelocityStateSensor_SendFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.SendTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.SendTransition()");
            }

            return;
        }

        protected void UpdateEventTransition(VelocityStateSensor_SendFSMContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.UpdateEventTransition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : VelocityStateSensor_SendFSM_SM.VelocityStateSensor_SendFSM_SM.Internally_Generated_State_DO_NOT_USE.UpdateEventTransition()");
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
